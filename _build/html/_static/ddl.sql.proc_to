create table uuid1 
   (pk_col raw(16) not null enable, 
    uuid varchar2(128 byte), 
    constraint uuid1_pk primary key (pk_col) using index);
    
create table uuid4 
   (pk_col raw(16) not null enable, 
    uuid varchar2(128 byte), 
    constraint uuid4_pk primary key (pk_col) using index);
    
create table seq
   (pk_col number not null enable, 
    uuid varchar2(128 byte), 
    constraint seq_pk primary key (pk_col) using index);

create sequence  seq_seq1 
  increment by 1 
  start with 1 cache 1000 
  noorder  nocycle  nokeep  noscale  global ;

create or replace trigger seq_trg 
before insert on seq 
for each row 
begin
  <<column_sequences>>
  begin
    if inserting and :new.pk_col is null then
      select seq_seq1.nextval into :new.pk_col from sys.dual;
    end if;
  end column_sequences;
end;
/

alter trigger seq_trg enable;

create table bin 
   (pk_col number not null enable, 
	uuid varchar2(128 byte), 
	constraint bin_pk primary key (pk_col));

create sequence  bin_seq  
  increment by 1 
  start with 1 cache 1000 
  noorder  nocycle  nokeep  noscale  global ;

create or replace trigger bin_trg 
before insert on bin 
for each row 
begin
  <<column_sequences>>
  begin
    if inserting and :new.pk_col is null then
      select pkg_generate_id.fcn_generate_id(in_site_id => 10, in_id => bin_seq.nextval) into :new.pk_col from sys.dual;
    end if;
  end column_sequences;
end;
/

alter trigger bin_trg enable;

CREATE OR REPLACE package pkg_generate_id as

function fcn_generate_id(in_site_id number, in_id number) return number;

end pkg_generate_id;
/


CREATE OR REPLACE package body pkg_generate_id as

function dec2bin (n in number) return varchar2 is
  binval varchar2(64);
  n2     number := n;
begin
  while ( n2 > 0 ) loop
     binval := mod(n2, 2) || binval;
     n2 := trunc( n2 / 2 );
  end loop;
  return binval;
end dec2bin;

function bin2dec (binval in char) return number IS
  i                 number;
  digits            number;
  result            number := 0;
  current_digit     char(1);
  current_digit_dec number;
begin
  digits := length(binval);
  for i in 1..digits loop
     current_digit := SUBSTR(binval, i, 1);
     current_digit_dec := to_number(current_digit);
     result := (result * 2) + current_digit_dec;
  end loop;
  return result;
end bin2dec;


function fcn_generate_id(in_site_id number, in_id number) return number
is

l_site_id_bin varchar2(256);
l_id_bin      varchar2(256);

begin

  l_site_id_bin := dec2bin(in_site_id);
  l_id_bin      := dec2bin(in_id);

return bin2dec(l_id_bin||l_site_id_bin);
end fcn_generate_id;

end pkg_generate_id;
/
